services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    #ports:
    #  - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    networks:
      - write_network # Connessione con il service che scrive
      - user_network # Connessione con il service di lettura dati degli user
      - retrive_network # Connessione con il service di lettura dei messaggi

  write:
    build:
      context: ./write-service
      dockerfile: Dockerfile
    container_name: write
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - MONGO_URL=mongodb://mongodb:27017/projectOne
      - AMQP_HOST=rabbitmq
      - AMQP_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    restart: unless-stopped
    networks:
      - broker_network # Connessione con RabbitMQ
      - write_network # COnnessione con MongoDB
    volumes: # Necessari per permettere il 'hot-reload'
      - ./write-service:/usr/src/write # 'Linkiamo' il codice, ogni modifica fatta viene trasmessa al container subito
      - /usr/src/auth/node_modules # Rimuoviamo la cartella dei moduli che verrà creata solo al build iniziale

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    #ports:
    #  - "1885:1883" # MQTT
    #  - "5672:5672" # AMQP
    #  - "15672:15672" # Management UI
    #  - "15675:15675" # MQTT over WebSocket
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/logs:/var/log/rabbitmq
      - ./rabbitmq/conf:/etc/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: unless-stopped
    networks:
      - shared_network # Connessione con Kong e altri services
      - broker_network # Connessione con il service che scrive

  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth
    environment:
      - FIREBASE_API=${FIREBASE_API}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    restart: unless-stopped
    networks:
      - shared_network # Connessione con Kong e altri service
    volumes: # Necessari per permettere il 'hot-reload'
      - ./auth-service:/usr/src/auth # 'Linkiamo' il codice, ogni modifica fatta viene trasmessa al container subito
      - /usr/src/auth/node_modules # Rimuoviamo la cartella dei moduli che verrà creata solo al build iniziale
    
  retrive:
    build:
      context: ./retrive-service
      dockerfile: Dockerfile
    container_name: retrive
    environment:
      - MONGO_URL=mongodb://mongodb:27017/projectOne
    restart: unless-stopped
    networks:
      - retrive_network # Connessione con MongoDB
      - shared_network # Connessione con Kong e altri service
    volumes: # Necessari per permettere il 'hot-reload'
      - ./retrive-service:/usr/src/retrive # 'Linkiamo' il codice, ogni modifica fatta viene trasmessa al container subito
      - /usr/src/retrive/node_modules # Rimuoviamo la cartella dei moduli che verrà creata solo al build iniziale

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:5173"
    depends_on:
      - auth
    restart: unless-stopped
    networks:
      - frontend_network # Connessione esclusivamente con Kong
    environment:
      - REACT_APP_API_URL=http://localhost:5173
      - REACT_APP_MQTT_HOST=localhost
      - REACT_APP_MQTT_PORT=8000 # Kong's port
      - REACT_APP_MQTT_PATH=/mqtt-ws
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    volumes: # Necessari per permettere il 'hot-reload'
      - ./front-end:/usr/src/fe # 'Linkiamo' il codice, ogni modifica fatta viene trasmessa al container subito
      - exclude:/usr/src/fe/node_modules # Rimuoviamo la cartella dei moduli che verrà creata solo al build iniziale

  # Kong services
  kong-db:
    image: postgres:13
    container_name: kong-db
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong_network # Connessione esclusiva per servizi Kong
    restart: unless-stopped

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
    networks:
      - kong_network # Connessione esclusiva per servizi Kong
    restart: on-failure

  kong:
    image: kong:latest
    container_name: kong
    depends_on:
      - kong-migrations
      - kong-db
      - rabbitmq
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000" # Kong proxy port
      - "8001:8001" # Kong Admin API
      - "8443:8443" # Kong proxy SSL
      - "8444:8444" # Kong Admin API SSL
    networks:
      - frontend_network # Connessione con FE
      - shared_network # Connessione con services
      - kong_network # Connessione esclusiva per servizi Kong
    restart: unless-stopped

  kong-setup:
    image: alpine:latest
    container_name: kong-setup
    depends_on:
      - kong
    environment:
    - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    - ISSUER=${FIREBASE_CLIENT_EMAIL}
    volumes:
      - ./kong-setup.sh:/tmp/kong-setup.sh:ro
      - ./public_key.pem:/tmp/public_key.pem:ro
    command: |
      /bin/sh -c "
        apk add --no-cache curl dos2unix &&
        cp /tmp/kong-setup.sh /kong-setup.sh &&
        dos2unix /kong-setup.sh &&
        chmod +x /kong-setup.sh &&
        sh -x /kong-setup.sh
      "
    networks:
      - frontend_network # Connessione con FE
      - shared_network # Connessione con i services (deve creare service e route)
      - kong_network # Connessione esclusiva per servizi Kong
    restart: on-failure

networks:
  frontend_network:
    driver: bridge
  retrive_network:
    driver: bridge
  user_network:
    driver: bridge
  broker_network:
    driver: bridge
  write_network:
    driver: bridge
  shared_network:
    driver: bridge
  kong_network:
    driver: bridge

volumes:
  mongo_data:
  kong_data:
  exclude:
